[build-system]
# AVOID CHANGING REQUIRES: IT WILL BE UPDATED BY PYSCAFFOLD!
requires = ["setuptools>=46.1.0", "setuptools_scm[toml]>=5", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "ConfigUpdater"
description = "Parser like ConfigParser but for updating configuration files"
authors = [
    { name = "Florian Wilhelm", email = "Florian.Wilhelm@gmail.com" },
]
license = {text = "MIT"}
keywords = ["ini-file", "cfg-file", "config updater"]
readme = "README.md"
requires-python = ">=3.6"
dynamic = ["version"]
dependencies = [
    # TODO: Remove conditional dependencies according to `python_requires` above
    'importlib-metadata; python_version<"3.8"',
]
# Add here all kinds of additional classifiers as defined under
# https://pypi.python.org/pypi?%3Aaction=list_classifiers
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.6",
    "Programming Language :: Python :: 3.7",
    "Programming Language :: Python :: 3.8",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Operating System :: OS Independent",
    "License :: OSI Approved :: MIT License",
    "Intended Audience :: Developers",
    "Operating System :: POSIX :: Linux",
    "Operating System :: Unix",
    "Operating System :: MacOS",
    "Operating System :: Microsoft :: Windows",
]

[project.urls]
Documentation = "https://configupdater.readthedocs.io/"
Source = "https://github.com/pyscaffold/configupdater/"
Tracker = "https://github.com/pyscaffold/configupdater/issues"
Changelog = "https://configupdater.readthedocs.io/en/latest/changelog.html"
Download = "https://pypi.org/project/configupdater/#files"
Conda-Forge = "https://anaconda.org/conda-forge/configupdater"
# Twitter = "https://twitter.com/PyScaffold"

[project.optional-dependencies]
# Add here test requirements (used by tox)
testing = [
    "sphinx",  # required for system tests
    "flake8",  # required for system tests
    "pytest",
    "pytest-cov",
    "pytest-virtualenv",
    "pytest-xdist",
    "pytest-randomly",
]

[tool.setuptools]
# Change if running only on Windows, Mac or Linux (comma-separated)
platforms = ["any"]
zip-safe = false
include-package-data = true

[tool.setuptools.packages.find]
where = ["src"]
namespaces = false
exclude = ["tests*"]

[tool.setuptools_scm]
# See configuration details in https://github.com/pypa/setuptools_scm
version_scheme = "no-guess-dev"

[tool.pytest.ini_options]
# Specify command line options as you would do when invoking pytest directly.
# e.g. --cov-report html (or xml) for html/xml output or --junitxml junit.xml
# in order to write a coverage file that can be read by Jenkins.
addopts = "--cov configupdater --cov-report term-missing --verbose"
norecursedirs = ["dist", "build", ".tox",]
testpaths = ["tests"]
# Use pytest markers to select/deselect specific tests
# markers =
#     slow: mark tests as slow (deselect with '-m "not slow"')
#     system: mark end-to-end system tests

[tool.distutils.bdist_wheel]
# Use this option if your package is pure-python
universal = true

[tool.mypy]
pretty = true
show_error_codes = true
show_error_context = true
show_traceback = true
ignore_missing_imports = true
warn_redundant_casts = true
warn_unused_ignores = true

[tool.pyscaffold]
# PyScaffold's parameters when the project was created.
# This will be used when updating. Do not change!
version = "4.0.1rc2"
package = "configupdater"
extensions = [
    "no_skeleton",
    "pre_commit",
    "cirrus",
]
